service: my-stepfunction-parallel
frameworkVersion: '2 || 3'
plugins:
  - serverless-step-functions
provider:
  name: aws
  runtime: nodejs16.x
  profile: rafae
  lambdaHashingVersion: 20201221
  region: us-east-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:CreateStateMachine
        - states:DeleteStateMachine
        - states:DescribeStateMachine
        - states:ListStateMachines
        - states:StartExecution
        - states:StopExecution
      Resource: '*'

functions:
  lambdaOne:
    handler: functions/secondBranchFunction/lambdaOne.handler
  lambdaTwo:
    handler: functions/secondBranchFunction/lambdaTwo.handler

  extractDataFunction:
    handler: functions/extractData.handler
  processDataFunction:
    handler: functions/processData.handler
  sendDataFunction:
    handler: functions/sendData.handler
  stepLambdaFunction:
    handler: functions/hello.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: '*'

stepFunctions:
  stateMachines:
    myStateMachine:
      type: STANDARD
      definition:
        Comment: "Parallel State Machine Example!"
        StartAt: ParallelState
        States:
          ParallelState:
            Type: Parallel
            Branches:
              - StartAt: ExtractData
                States:
                  ExtractData:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [extractDataFunction, Arn]
                      InputPath: "$.inputForBranch1"
                    Next: ProcessData
                  ProcessData:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [processDataFunction, Arn]
                    Next: SendData
                  SendData:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [sendDataFunction, Arn]
                    End: true
              - StartAt: lambdaOneExecute
                States:
                  lambdaOneExecute:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [lambdaOne, Arn]
                      InputPath: "$.inputForBranch2"
                    Next: lambdaTwoExecute
                  lambdaTwoExecute:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [lambdaTwo, Arn]
                    End: true
            End: true